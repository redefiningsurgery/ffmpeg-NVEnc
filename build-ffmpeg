#!/bin/bash

# HOMEPAGE: https://github.com/markus-perl/ffmpeg-build-script
# LICENSE: https://github.com/markus-perl/ffmpeg-build-script/blob/master/LICENSE

# Define environment variables for versions
FFMPEG_VERSION=${FFMPEG_VERSION:-5.1}
NVENC_VERSION=${NVENC_VERSION:-7.08}
GIFLIB_VERSION=${GIFLIB_VERSION:-5.2.1}
PKG_CONFIG_VERSION=${PKG_CONFIG_VERSION:-0.29.2}
YASM_VERSION=${YASM_VERSION:-1.3.0}
NASM_VERSION=${NASM_VERSION:-2.16.01}
ZLIB_VERSION=${ZLIB_VERSION:-1.2.13}
M4_VERSION=${M4_VERSION:-1.4.19}
AUTOCONF_VERSION=${AUTOCONF_VERSION:-2.71}
AUTOMAKE_VERSION=${AUTOMAKE_VERSION:-1.16.5}
LIBTOOL_VERSION=${LIBTOOL_VERSION:-2.4.7}
OPENSSL_VERSION=${OPENSSL_VERSION:-1.1.1s}
GMP_VERSION=${GMP_VERSION:-6.2.1}
NETTLE_VERSION=${NETTLE_VERSION:-3.8.1}
GNUTLS_VERSION=${GNUTLS_VERSION:-3.7.8}
CMAKE_VERSION=${CMAKE_VERSION:-3.25.1}
DAV1D_VERSION=${DAV1D_VERSION:-1.0.0}
SVTAV1_VERSION=${SVTAV1_VERSION:-1.4.1}
RAV1E_VERSION=${RAV1E_VERSION:-0.6.2}
X264_VERSION=${X264_VERSION:-941cae6d}
X265_VERSION=${X265_VERSION:-3.5}
LIBVPX_VERSION=${LIBVPX_VERSION:-1.12.0}
XVIDCORE_VERSION=${XVIDCORE_VERSION:-1.3.7}
VIDSTAB_VERSION=${VIDSTAB_VERSION:-1.1.0}
AOM_VERSION=${AOM_VERSION:-bcfe6fb}
ZIMG_VERSION=${ZIMG_VERSION:-3.0.4}
LV2_VERSION=${LV2_VERSION:-1.18.10}
WAF_VERSION=${WAF_VERSION:-b600c92}
SERD_VERSION=${SERD_VERSION:-0.30.16}
PCRE_VERSION=${PCRE_VERSION:-8.45}
SORD_VERSION=${SORD_VERSION:-0.16.14}
SRATOM_VERSION=${SRATOM_VERSION:-0.6.14}
LILV_VERSION=${LILV_VERSION:-0.24.20}
OPENCORE_VERSION=${OPENCORE_VERSION:-0.1.6}
LAME_VERSION=${LAME_VERSION:-3.100}
OPUS_VERSION=${OPUS_VERSION:-1.3.1}
LIBOGG_VERSION=${LIBOGG_VERSION:-1.3.5}
LIBVORBIS_VERSION=${LIBVORBIS_VERSION:-1.3.7}
LIBTHEORA_VERSION=${LIBTHEORA_VERSION:-1.1.1}
FDK_AAC_VERSION=${FDK_AAC_VERSION:-2.0.2}
LIBTIFF_VERSION=${LIBTIFF_VERSION:-4.5.0}
LIBPNG_VERSION=${LIBPNG_VERSION:-1.6.39}
LIBWEBP_VERSION=${LIBWEBP_VERSION:-1.2.2}
LIBSDL_VERSION=${LIBSDL_VERSION:-2.26.1}
SRT_VERSION=${SRT_VERSION:-1.5.1}
NVCODEC_VERSION=${NVCODEC_VERSION:-11.1.5.0}
AMF_VERSION=${AMF_VERSION:-1.4.28}
AVISYNTHPLUS_VERSION=${AVISYNTHPLUS_VERSION:-3.7.2}

PROGNAME=$(basename "$0")
SCRIPT_VERSION=1.43
CWD=$(pwd)
PACKAGES="$CWD/packages"
WORKSPACE="$CWD/workspace"
CFLAGS="-I$WORKSPACE/include"
LDFLAGS="-L$WORKSPACE/lib"
LDEXEFLAGS=""
EXTRALIBS="-ldl -lpthread -lm -lz"
MACOS_M1=false
CONFIGURE_OPTIONS=()
NONFREE_AND_GPL=false
LATEST=false

# Check for Apple Silicon
if [[ ("$(uname -m)" == "arm64") && ("$OSTYPE" == "darwin"*) ]]; then
  export ARCH=arm64
  export MACOSX_DEPLOYMENT_TARGET=11.0
  MACOS_M1=true
fi

# Speed up the process
if [[ -n "$NUMJOBS" ]]; then
  MJOBS="$NUMJOBS"
elif [[ -f /proc/cpuinfo ]]; then
  MJOBS=$(grep -c processor /proc/cpuinfo)
elif [[ "$OSTYPE" == "darwin"* ]]; then
  MJOBS=$(sysctl -n machdep.cpu.thread_count)
  CONFIGURE_OPTIONS=("--enable-videotoolbox")
  MACOS_LIBTOOL="$(which libtool)"
else
  MJOBS=4
fi

make_dir() {
  remove_dir "$1"
  if ! mkdir "$1"; then
    printf "\n Failed to create dir %s" "$1"
    exit 1
  fi
}

remove_dir() {
  if [ -d "$1" ]; then
    rm -r "$1"
  fi
}

download() {
  DOWNLOAD_PATH="$PACKAGES"
  DOWNLOAD_FILE="${2:-"${1##*/}"}"

  if [[ "$DOWNLOAD_FILE" =~ tar. ]]; then
    TARGETDIR="${DOWNLOAD_FILE%.*}"
    TARGETDIR="${3:-"${TARGETDIR%.*}"}"
  else
    TARGETDIR="${3:-"${DOWNLOAD_FILE%.*}"}"
  fi

  if [ ! -f "$DOWNLOAD_PATH/$DOWNLOAD_FILE" ]; then
    echo "Downloading $1 as $DOWNLOAD_FILE"
    curl -L --silent -o "$DOWNLOAD_PATH/$DOWNLOAD_FILE" "$1"

    EXITCODE=$?
    if [ $EXITCODE -ne 0 ]; then
      echo ""
      echo "Failed to download $1. Exitcode $EXITCODE. Retrying in 10 seconds"
      sleep 10
      curl -L --silent -o "$DOWNLOAD_PATH/$DOWNLOAD_FILE" "$1"
    fi

    EXITCODE=$?
    if [ $EXITCODE -ne 0 ]; then
      echo ""
      echo "Failed to download $1. Exitcode $EXITCODE"
      exit 1
    fi

    echo "... Done"
  else
    echo "$DOWNLOAD_FILE has already downloaded."
  fi

  make_dir "$DOWNLOAD_PATH/$TARGETDIR"

  if [[ "$DOWNLOAD_FILE" == *"patch"* ]]; then
    return
  fi

  if [ -n "$3" ]; then
    if ! tar -xvf "$DOWNLOAD_PATH/$DOWNLOAD_FILE" -C "$DOWNLOAD_PATH/$TARGETDIR" 2>/dev/null >/dev/null; then
      echo "Failed to extract $DOWNLOAD_FILE"
      exit 1
    fi
  else
    if ! tar -xvf "$DOWNLOAD_PATH/$DOWNLOAD_FILE" -C "$DOWNLOAD_PATH/$TARGETDIR" --strip-components 1 2>/dev/null >/dev/null; then
      echo "Failed to extract $DOWNLOAD_FILE"
      exit 1
    fi
  fi

  echo "Extracted $DOWNLOAD_FILE"

  cd "$DOWNLOAD_PATH/$TARGETDIR" || (
    echo "Error has occurred."
    exit 1
  )
}

execute() {
  echo "$ $*"
  OUTPUT=$("$@" 2>&1)

  if [ $? -ne 0 ]; then
    echo "$OUTPUT"
    echo ""
    echo "Failed to Execute $*" >&2
    exit 1
  fi
}

build() {
  echo ""
  echo "building $1 - version $2"
  echo "======================="

  if [ -f "$PACKAGES/$1.done" ]; then
    if grep -Fx "$2" "$PACKAGES/$1.done" >/dev/null; then
      echo "$1 version $2 already built. Remove $PACKAGES/$1.done lockfile to rebuild it."
      return 1
    elif $LATEST; then
      echo "$1 is outdated and will be rebuilt with latest version $2"
      return 0
    else
      echo "$1 is outdated, but will not be rebuilt. Pass in --latest to rebuild it or remove $PACKAGES/$1.done lockfile."
      return 1
    fi
  fi

  return 0
}

command_exists() {
  if ! [[ -x $(command -v "$1") ]]; then
    return 1
  fi

  return 0
}

library_exists() {
  if ! [[ -x $(pkg-config --exists --print-errors "$1" 2>&1 >/dev/null) ]]; then
    return 1
  fi

  return 0
}

build_done() {
  echo "$2" > "$PACKAGES/$1.done"
}

verify_binary_type() {
  if ! command_exists "file"; then
    return
  fi

  BINARY_TYPE=$(file "$WORKSPACE/bin/ffmpeg" | sed -n 's/^.*\:\ \(.*$\)/\1/p')
  echo ""
  case $BINARY_TYPE in
  "Mach-O 64-bit executable arm64")
    echo "Successfully built Apple Silicon (M1) for ${OSTYPE}: ${BINARY_TYPE}"
    ;;
  *)
    echo "Successfully built binary for ${OSTYPE}: ${BINARY_TYPE}"
    ;;
  esac
}

cleanup() {
  remove_dir "$PACKAGES"
  remove_dir "$WORKSPACE"
  echo "Cleanup done."
  echo ""
}

usage() {
  echo "Usage: $PROGNAME [OPTIONS]"
  echo "Options:"
  echo "  -h, --help                     Display usage information"
  echo "      --version                  Display version information"
  echo "  -b, --build                    Starts the build process"
  echo "      --enable-gpl-and-non-free  Enable GPL and non-free codecs  - https://ffmpeg.org/legal.html"
  echo "  -c, --cleanup                  Remove all working dirs"
  echo "      --latest                   Build latest version of dependencies if newer available"
  echo "      --full-static              Build a full static FFmpeg binary (eg. glibc, pthreads etc...) **only Linux**"
  echo "                                 Note: Because of the NSS (Name Service Switch), glibc does not recommend static links."
  echo ""
}

echo "ffmpeg-build-script v$SCRIPT_VERSION"
echo "========================="
echo ""

while (($# > 0)); do
  case $1 in
  -h | --help)
    usage
    exit 0
    ;;
  --version)
    echo "$SCRIPT_VERSION"
    exit 0
    ;;
  -*)
    if [[ "$1" == "--build" || "$1" =~ '-b' ]]; then
      bflag='-b'
    fi
    if [[ "$1" == "--enable-gpl-and-non-free" ]]; then
      CONFIGURE_OPTIONS+=("--enable-nonfree")
      CONFIGURE_OPTIONS+=("--enable-gpl")
      NONFREE_AND_GPL=true
    fi
    if [[ "$1" == "--cleanup" || "$1" =~ '-c' && ! "$1" =~ '--' ]]; then
      cflag='-c'
      cleanup
    fi
    if [[ "$1" == "--full-static" ]]; then
      if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "Error: A full static binary can only be build on Linux."
        exit 1
      fi
      LDEXEFLAGS="-static"
    fi
    if [[ "$1" == "--latest" ]]; then
      LATEST=true
    fi
    shift
    ;;
  *)
    usage
    exit 1
    ;;
  esac
done

if [ -z "$bflag" ]; then
  if [ -z "$cflag" ]; then
    usage
    exit 1
  fi
  exit 0
fi

echo "Using $MJOBS make jobs simultaneously."

if $NONFREE_AND_GPL; then
  echo "With GPL and non-free codecs"
fi

if [ -n "$LDEXEFLAGS" ]; then
  echo "Start the build in full static mode."
fi

mkdir -p "$PACKAGES"
mkdir -p "$WORKSPACE"

export PATH="${WORKSPACE}/bin:$PATH"
PKG_CONFIG_PATH="/usr/local/lib/x86_64-linux-gnu/pkgconfig:/usr/local/lib/pkgconfig"
PKG_CONFIG_PATH+=":/usr/local/share/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig:/usr/lib64/pkgconfig"
export PKG_CONFIG_PATH

if ! command_exists "make"; then
  echo "make not installed."
  exit 1
fi

if ! command_exists "g++"; then
  echo "g++ not installed."
  exit 1
fi

if ! command_exists "curl"; then
  echo "curl not installed."
  exit 1
fi

if ! command_exists "cargo"; then
  echo "cargo not installed. rav1e encoder will not be available."
fi

if ! command_exists "python3"; then
  echo "python3 command not found. Lv2 filter and dav1d decoder will not be available."
fi

##
## build tools
##

if build "giflib" "$GIFLIB_VERSION"; then
  download "https://netcologne.dl.sourceforge.net/project/giflib/giflib-$GIFLIB_VERSION.tar.gz"
  if [[ "$OSTYPE" == "darwin"* ]]; then
    download "https://sourceforge.net/p/giflib/bugs/_discuss/thread/4e811ad29b/c323/attachment/Makefile.patch"
    execute patch -p0 --forward "${PACKAGES}/giflib-$GIFLIB_VERSION/Makefile" "${PACKAGES}/Makefile.patch" || true
  fi
  cd "${PACKAGES}"/giflib-"$GIFLIB_VERSION" || exit
  execute make
  execute make PREFIX="${WORKSPACE}" install
  build_done "giflib" "$GIFLIB_VERSION"
fi

if build "pkg-config" "$PKG_CONFIG_VERSION"; then
  download "https://pkgconfig.freedesktop.org/releases/pkg-config-$PKG_CONFIG_VERSION.tar.gz"
  execute ./configure --silent --prefix="${WORKSPACE}" --with-pc-path="${WORKSPACE}"/lib/pkgconfig --with-internal-glib
  execute make -j $MJOBS
  execute make install
  build_done "pkg-config" "$PKG_CONFIG_VERSION"
fi

if build "yasm" "$YASM_VERSION"; then
  download "https://github.com/yasm/yasm/releases/download/v$YASM_VERSION/yasm-$YASM_VERSION.tar.gz"
  execute ./configure --prefix="${WORKSPACE}"
  execute make -j $MJOBS
  execute make install
  build_done "yasm" "$YASM_VERSION"
fi

if build "nasm" "$NASM_VERSION"; then
  download "https://www.nasm.us/pub/nasm/releasebuilds/$NASM_VERSION/nasm-$NASM_VERSION.tar.xz"
  execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
  execute make -j $MJOBS
  execute make install
  build_done "nasm" "$NASM_VERSION"
fi

if build "zlib" "$ZLIB_VERSION"; then
  download "https://zlib.net/fossils/zlib-$ZLIB_VERSION.tar.gz"
  execute ./configure --static --prefix="${WORKSPACE}"
  execute make -j $MJOBS
  execute make install
  build_done "zlib" "$ZLIB_VERSION"
fi

if build "m4" "$M4_VERSION"; then
  download "https://ftp.gnu.org/gnu/m4/m4-$M4_VERSION.tar.gz"
  execute ./configure --prefix="${WORKSPACE}"
  execute make -j $MJOBS
  execute make install
  build_done "m4" "$M4_VERSION"
fi

if build "autoconf" "$AUTOCONF_VERSION"; then
  download "https://ftp.gnu.org/gnu/autoconf/autoconf-$AUTOCONF_VERSION.tar.gz"
  execute ./configure --prefix="${WORKSPACE}"
  execute make -j $MJOBS
  execute make install
  build_done "autoconf" "$AUTOCONF_VERSION"
fi

if build "automake" "$AUTOMAKE_VERSION"; then
  download "https://ftp.gnu.org/gnu/automake/automake-$AUTOMAKE_VERSION.tar.gz"
  execute ./configure --prefix="${WORKSPACE}"
  execute make -j $MJOBS
  execute make install
  build_done "automake" "$AUTOMAKE_VERSION"
fi

if build "libtool" "$LIBTOOL_VERSION"; then
  download "https://ftpmirror.gnu.org/libtool/libtool-$LIBTOOL_VERSION.tar.gz"
  execute ./configure --prefix="${WORKSPACE}" --enable-static --disable-shared
  execute make -j $MJOBS
  execute make install
  build_done "libtool" "$LIBTOOL_VERSION"
fi

if $NONFREE_AND_GPL; then
  if build "openssl" "$OPENSSL_VERSION"; then
    download "https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz"
    if $MACOS_M1; then
      sed -n 's/\(##### GNU Hurd\)/"darwin64-arm64-cc" => { \n    inherit_from     => [ "darwin-common", asm("aarch64_asm") ],\n    CFLAGS           => add("-Wall"),\n    cflags           => add("-arch arm64 "),\n    lib_cppflags     => add("-DL_ENDIAN"),\n    bn_ops           => "SIXTY_FOUR_BIT_LONG", \n    perlasm_scheme   => "macosx", \n}, \n\1/g' Configurations/10-main.conf
      execute ./Configure --prefix="${WORKSPACE}" no-shared no-asm darwin64-arm64-cc
    else
      execute ./config --prefix="${WORKSPACE}" --openssldir="${WORKSPACE}" --with-zlib-include="${WORKSPACE}"/include/ --with-zlib-lib="${WORKSPACE}"/lib no-shared zlib
    fi
    execute make -j $MJOBS
    execute make install_sw
    build_done "openssl" "$OPENSSL_VERSION"
  fi
  CONFIGURE_OPTIONS+=("--enable-openssl")
else
  if build "gmp" "$GMP_VERSION"; then
    download "https://ftp.gnu.org/gnu/gmp/gmp-$GMP_VERSION.tar.xz"
    execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
    execute make -j $MJOBS
    execute make install
    build_done "gmp" "$GMP_VERSION"
  fi

  if build "nettle" "$NETTLE_VERSION"; then
    download "https://ftp.gnu.org/gnu/nettle/nettle-$NETTLE_VERSION.tar.gz"
    execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static --disable-openssl --disable-documentation --libdir="${WORKSPACE}"/lib CPPFLAGS="${CFLAGS}" LDFLAGS="${LDFLAGS}"
    execute make -j $MJOBS
    execute make install
    build_done "nettle" "$NETTLE_VERSION"
  fi

  if [[ ! $ARCH == 'arm64' ]]; then
    if build "gnutls" "$GNUTLS_VERSION"; then
      download "https://www.gnupg.org/ftp/gcrypt/gnutls/v3.7/gnutls-$GNUTLS_VERSION.tar.xz"
      execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static --disable-doc --disable-tools --disable-cxx --disable-tests --disable-gtk-doc-html --disable-libdane --disable-nls --enable-local-libopts --disable-guile --with-included-libtasn1 --with-included-unistring --without-p11-kit CPPFLAGS="${CFLAGS}" LDFLAGS="${LDFLAGS}"
      execute make -j $MJOBS
      execute make install
      build_done "gnutls" "$GNUTLS_VERSION"
    fi
  fi
fi

if build "cmake" "$CMAKE_VERSION"; then
  download "https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION.tar.gz"
  execute ./configure --prefix="${WORKSPACE}" --parallel="${MJOBS}" -- -DCMAKE_USE_OPENSSL=OFF
  execute make -j $MJOBS
  execute make install
  build_done "cmake" "$CMAKE_VERSION"
fi

if command_exists "python3"; then
  if command_exists "pip3"; then
    execute pip3 install pip setuptools --quiet --upgrade --no-cache-dir --disable-pip-version-check
    for r in meson ninja; do
      if ! command_exists ${r}; then
        execute pip3 install ${r} --quiet --upgrade --no-cache-dir --disable-pip-version-check
      fi
    export PATH=$PATH:~/Library/Python/3.9/bin
    done
  fi
  if command_exists "meson"; then
    if build "dav1d" "$DAV1D_VERSION"; then
      download "https://code.videolan.org/videolan/dav1d/-/archive/$DAV1D_VERSION/dav1d-$DAV1D_VERSION.tar.gz"
      make_dir build
      CFLAGSBACKUP=$CFLAGS
      if $MACOS_M1; then
        export CFLAGS="-arch arm64"
      fi
      execute meson build --prefix="${WORKSPACE}" --buildtype=release --default-library=static --libdir="${WORKSPACE}"/lib
      execute ninja -C build
      execute ninja -C build install
      if $MACOS_M1; then
        export CFLAGS=$CFLAGSBACKUP
      fi
      build_done "dav1d" "$DAV1D_VERSION"
    fi
    CONFIGURE_OPTIONS+=("--enable-libdav1d")
  fi
fi

if ! $MACOS_M1; then
  if build "svtav1" "$SVTAV1_VERSION"; then
    download "https://gitlab.com/AOMediaCodec/SVT-AV1/-/archive/v$SVTAV1_VERSION/SVT-AV1-v$SVTAV1_VERSION.tar.gz" "svtav1-$SVTAV1_VERSION.tar.gz"
    cd "${PACKAGES}"/svtav1-"$SVTAV1_VERSION"/Build/linux || exit
    execute cmake -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DENABLE_SHARED=off -DBUILD_SHARED_LIBS=OFF ../.. -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release
    execute make -j $MJOBS
    execute make install
    execute cp SvtAv1Enc.pc "${WORKSPACE}/lib/pkgconfig/"
    execute cp SvtAv1Dec.pc "${WORKSPACE}/lib/pkgconfig/"
    build_done "svtav1" "$SVTAV1_VERSION"
  fi
  CONFIGURE_OPTIONS+=("--enable-libsvtav1")
fi

if command_exists "cargo"; then
  if build "rav1e" "$RAV1E_VERSION"; then
    execute cargo install --version "0.9.14+cargo-0.66" cargo-c
    download "https://github.com/xiph/rav1e/archive/refs/tags/v$RAV1E_VERSION.tar.gz"
    execute cargo cinstall --prefix="${WORKSPACE}" --library-type=staticlib --crt-static --release
    build_done "rav1e" "$RAV1E_VERSION"
  fi
  CONFIGURE_OPTIONS+=("--enable-librav1e")
fi

if $NONFREE_AND_GPL; then
  if build "x264" "$X264_VERSION"; then
    download "https://code.videolan.org/videolan/x264/-/archive/$X264_VERSION/x264-$X264_VERSION.tar.gz" "x264-$X264_VERSION.tar.gz"
    cd "${PACKAGES}"/x264-"$X264_VERSION" || exit
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
      execute ./configure --prefix="${WORKSPACE}" --enable-static --enable-pic CXXFLAGS="-fPIC ${CXXFLAGS}"
    else
      execute ./configure --prefix="${WORKSPACE}" --enable-static --enable-pic
    fi
    execute make -j $MJOBS
    execute make install
    execute make install-lib-static
    build_done "x264" "$X264_VERSION"
  fi
  CONFIGURE_OPTIONS+=("--enable-libx264")
fi

if $NONFREE_AND_GPL; then
  if build "x265" "$X265_VERSION"; then
    download "https://github.com/videolan/x265/archive/Release_$X265_VERSION.tar.gz" "x265-$X265_VERSION.tar.gz"
    cd build/linux || exit
    rm -rf 8bit 10bit 12bit 2>/dev/null
    mkdir -p 8bit 10bit 12bit
    cd 12bit || exit
    execute cmake ../../../source -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DENABLE_SHARED=OFF -DBUILD_SHARED_LIBS=OFF -DHIGH_BIT_DEPTH=ON -DENABLE_HDR10_PLUS=ON -DEXPORT_C_API=OFF -DENABLE_CLI=OFF -DMAIN12=ON
    execute make -j $MJOBS
    cd ../10bit || exit
    execute cmake ../../../source -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DENABLE_SHARED=OFF -DBUILD_SHARED_LIBS=OFF -DHIGH_BIT_DEPTH=ON -DENABLE_HDR10_PLUS=ON -DEXPORT_C_API=OFF -DENABLE_CLI=OFF
    execute make -j $MJOBS
    cd ../8bit || exit
    ln -sf ../10bit/libx265.a libx265_main10.a
    ln -sf ../12bit/libx265.a libx265_main12.a
    execute cmake ../../../source -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DENABLE_SHARED=OFF -DBUILD_SHARED_LIBS=OFF -DEXTRA_LIB="x265_main10.a;x265_main12.a;-ldl" -DEXTRA_LINK_FLAGS=-L. -DLINKED_10BIT=ON -DLINKED_12BIT=ON
    execute make -j $MJOBS

    mv libx265.a libx265_main.a

    if [[ "$OSTYPE" == "darwin"* ]]; then
      execute "${MACOS_LIBTOOL}" -static -o libx265.a libx265_main.a libx265_main10.a libx265_main12.a 2>/dev/null
    else
      execute ar -M <<EOF
CREATE libx265.a
ADDLIB libx265_main.a
ADDLIB libx265_main10.a
ADDLIB libx265_main12.a
SAVE
END
EOF
    fi

    execute make install

    if [ -n "$LDEXEFLAGS" ]; then
      sed -i.backup 's/-lgcc_s/-lgcc_eh/g' "${WORKSPACE}/lib/pkgconfig/x265.pc"
    fi

    build_done "x265" "$X265_VERSION"
  fi
  CONFIGURE_OPTIONS+=("--enable-libx265")
fi

if build "libvpx" "$LIBVPX_VERSION"; then
  download "https://github.com/webmproject/libvpx/archive/refs/tags/v$LIBVPX_VERSION.tar.gz" "libvpx-$LIBVPX_VERSION.tar.gz"
  if [[ "$OSTYPE" == "darwin"* ]]; then
    echo "Applying Darwin patch"
    sed "s/,--version-script//g" build/make/Makefile >build/make/Makefile.patched
    sed "s/-Wl,--no-undefined -Wl,-soname/-Wl,-undefined,error -Wl,-install_name/g" build/make/Makefile.patched >build/make/Makefile
  fi
  execute ./configure --prefix="${WORKSPACE}" --disable-unit-tests --disable-shared --disable-examples --as=yasm --enable-vp9-highbitdepth
  execute make -j $MJOBS
  execute make install
  build_done "libvpx" "$LIBVPX_VERSION"
fi
CONFIGURE_OPTIONS+=("--enable-libvpx")

if $NONFREE_AND_GPL; then
  if build "xvidcore" "$XVIDCORE_VERSION"; then
    download "https://downloads.xvid.com/downloads/xvidcore-$XVIDCORE_VERSION.tar.gz"
    cd build/generic || exit
    execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
    execute make -j $MJOBS
    execute make install

    if [[ -f ${WORKSPACE}/lib/libxvidcore.4.dylib ]]; then
      execute rm "${WORKSPACE}/lib/libxvidcore.4.dylib"
    fi

    if [[ -f ${WORKSPACE}/lib/libxvidcore.so ]]; then
      execute rm "${WORKSPACE}"/lib/libxvidcore.so*
    fi

    build_done "xvidcore" "$XVIDCORE_VERSION"
  fi
  CONFIGURE_OPTIONS+=("--enable-libxvid")
fi

if $NONFREE_AND_GPL; then
  if build "vid_stab" "$VIDSTAB_VERSION"; then
    download "https://github.com/georgmartius/vid.stab/archive/v$VIDSTAB_VERSION.tar.gz" "vid.stab-$VIDSTAB_VERSION.tar.gz"
    if $MACOS_M1; then
      curl -L --silent -o "$PACKAGES/vid.stab-$VIDSTAB_VERSION/fix_cmake_quoting.patch" "https://raw.githubusercontent.com/Homebrew/formula-patches/5bf1a0e0cfe666ee410305cece9c9c755641bfdf/libvidstab/fix_cmake_quoting.patch"
      patch -p1 <fix_cmake_quoting.patch
    fi
    execute cmake -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DUSE_OMP=OFF -DENABLE_SHARED=off .
    execute make
    execute make install
    build_done "vid_stab" "$VIDSTAB_VERSION"
  fi
  CONFIGURE_OPTIONS+=("--enable-libvidstab")
fi

if build "av1" "$AOM_VERSION"; then
  download "https://aomedia.googlesource.com/aom/+archive/$AOM_VERSION.tar.gz" "av1.tar.gz" "av1"
  make_dir "$PACKAGES"/aom_build
  cd "$PACKAGES"/aom_build || exit
  if $MACOS_M1; then
    execute cmake -DENABLE_TESTS=0 -DENABLE_EXAMPLES=0 -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DCMAKE_INSTALL_LIBDIR=lib -DCONFIG_RUNTIME_CPU_DETECT=0 "$PACKAGES"/av1
  else
    execute cmake -DENABLE_TESTS=0 -DENABLE_EXAMPLES=0 -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DCMAKE_INSTALL_LIBDIR=lib "$PACKAGES"/av1
  fi
  execute make -j $MJOBS
  execute make install
  build_done "av1" "$AOM_VERSION"
fi
CONFIGURE_OPTIONS+=("--enable-libaom")

if build "zimg" "$ZIMG_VERSION"; then
  download "https://github.com/sekrit-twc/zimg/archive/refs/tags/release-$ZIMG_VERSION.tar.gz" "zimg-$ZIMG_VERSION.tar.gz" "zimg"
  cd zimg-release-"$ZIMG_VERSION" || exit
  execute "${WORKSPACE}/bin/libtoolize" -i -f -q
  execute ./autogen.sh --prefix="${WORKSPACE}"
  execute ./configure --prefix="${WORKSPACE}" --enable-static --disable-shared
  execute make -j $MJOBS
  execute make install
  build_done "zimg" "$ZIMG_VERSION"
fi
CONFIGURE_OPTIONS+=("--enable-libzimg")

if command_exists "python3"; then
  if command_exists "meson"; then
    if build "lv2" "$LV2_VERSION"; then
      download "https://lv2plug.in/spec/lv2-$LV2_VERSION.tar.xz" "lv2-$LV2_VERSION.tar.xz"
      execute meson build --prefix="${WORKSPACE}" --buildtype=release --default-library=static --libdir="${WORKSPACE}"/lib
      execute ninja -C build
      execute ninja -C build install
      build_done "lv2" "$LV2_VERSION"
    fi

    if build "waflib" "$WAF_VERSION"; then
      download "https://gitlab.com/drobilla/autowaf/-/archive/$WAF_VERSION/autowaf-$WAF_VERSION.tar.gz" "autowaf.tar.gz"
      build_done "waflib" "$WAF_VERSION"
    fi

    if build "serd" "$SERD_VERSION"; then
      download "https://gitlab.com/drobilla/serd/-/archive/v$SERD_VERSION/serd-v$SERD_VERSION.tar.gz" "serd-v$SERD_VERSION.tar.gz"
      execute meson build --prefix="${WORKSPACE}" --buildtype=release --default-library=static --libdir="${WORKSPACE}"/lib
      execute ninja -C build
      execute ninja -C build install
      build_done "serd" "$SERD_VERSION"
    fi

    if build "pcre" "$PCRE_VERSION"; then
      download "https://altushost-swe.dl.sourceforge.net/project/pcre/pcre/$PCRE_VERSION/pcre-$PCRE_VERSION.tar.gz" "pcre-$PCRE_VERSION.tar.gz"
      execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
      execute make -j $MJOBS
      execute make install
      build_done "pcre" "$PCRE_VERSION"
    fi

    if build "sord" "$SORD_VERSION"; then
      download "https://gitlab.com/drobilla/sord/-/archive/v$SORD_VERSION/sord-v$SORD_VERSION.tar.gz" "sord-v$SORD_VERSION.tar.gz"
      execute meson build --prefix="${WORKSPACE}" --buildtype=release --default-library=static --libdir="${WORKSPACE}"/lib
      execute ninja -C build
      execute ninja -C build install
      build_done "sord" "$SORD_VERSION"
    fi

    if build "sratom" "$SRATOM_VERSION"; then
      download "https://gitlab.com/lv2/sratom/-/archive/v$SRATOM_VERSION/sratom-v$SRATOM_VERSION.tar.gz" "sratom-v$SRATOM_VERSION.tar.gz"
      execute meson build --prefix="${WORKSPACE}" --buildtype=release --default-library=static --libdir="${WORKSPACE}"/lib
      execute ninja -C build
      execute ninja -C build install
      build_done "sratom" "$SRATOM_VERSION"
    fi

    if build "lilv" "$LILV_VERSION"; then
      download "https://gitlab.com/lv2/lilv/-/archive/v$LILV_VERSION/lilv-v$LILV_VERSION.tar.gz" "lilv-v$LILV_VERSION.tar.gz"
      execute meson build --prefix="${WORKSPACE}" --buildtype=release --default-library=static --libdir="${WORKSPACE}"/lib
      execute ninja -C build
      execute ninja -C build install
      build_done "lilv" "$LILV_VERSION"
    fi
    CFLAGS+=" -I$WORKSPACE/include/lilv-0"
    CONFIGURE_OPTIONS+=("--enable-lv2")
  fi
fi

if build "opencore" "$OPENCORE_VERSION"; then
  download "https://netactuate.dl.sourceforge.net/project/opencore-amr/opencore-amr/opencore-amr-$OPENCORE_VERSION.tar.gz" "opencore-amr-$OPENCORE_VERSION.tar.gz"
  execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
  execute make -j $MJOBS
  execute make install
  build_done "opencore" "$OPENCORE_VERSION"
fi
CONFIGURE_OPTIONS+=("--enable-libopencore_amrnb" "--enable-libopencore_amrwb")

if build "lame" "$LAME_VERSION"; then
  download "https://sourceforge.net/projects/lame/files/lame/$LAME_VERSION/lame-$LAME_VERSION.tar.gz/download?use_mirror=gigenet" "lame-$LAME_VERSION.tar.gz"
  execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
  execute make -j $MJOBS
  execute make install
  build_done "lame" "$LAME_VERSION"
fi
CONFIGURE_OPTIONS+=("--enable-libmp3lame")

if build "opus" "$OPUS_VERSION"; then
  download "https://archive.mozilla.org/pub/opus/opus-$OPUS_VERSION.tar.gz"
  execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
  execute make -j $MJOBS
  execute make install
  build_done "opus" "$OPUS_VERSION"
fi
CONFIGURE_OPTIONS+=("--enable-libopus")

if build "libogg" "$LIBOGG_VERSION"; then
  download "https://ftp.osuosl.org/pub/xiph/releases/ogg/libogg-$LIBOGG_VERSION.tar.xz"
  execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
  execute make -j $MJOBS
  execute make install
  build_done "libogg" "$LIBOGG_VERSION"
fi

if build "libvorbis" "$LIBVORBIS_VERSION"; then
  download "https://ftp.osuosl.org/pub/xiph/releases/vorbis/libvorbis-$LIBVORBIS_VERSION.tar.gz"
  execute ./configure --prefix="${WORKSPACE}" --with-ogg-libraries="${WORKSPACE}"/lib --with-ogg-includes="${WORKSPACE}"/include/ --enable-static --disable-shared --disable-oggtest
  execute make -j $MJOBS
  execute make install
  build_done "libvorbis" "$LIBVORBIS_VERSION"
fi
CONFIGURE_OPTIONS+=("--enable-libvorbis")

if build "libtheora" "$LIBTHEORA_VERSION"; then
  download "https://ftp.osuosl.org/pub/xiph/releases/theora/libtheora-$LIBTHEORA_VERSION.tar.gz"
  sed "s/-fforce-addr//g" configure >configure.patched
  chmod +x configure.patched
  mv configure.patched configure

  if ! $MACOS_M1; then
    rm config.guess
    curl -L --silent -o "config.guess" "https://raw.githubusercontent.com/gcc-mirror/gcc/master/config.guess"
    chmod +x config.guess
  fi

  execute ./configure --prefix="${WORKSPACE}" --with-ogg-libraries="${WORKSPACE}"/lib --with-ogg-includes="${WORKSPACE}"/include/ --with-vorbis-libraries="${WORKSPACE}"/lib --with-vorbis-includes="${WORKSPACE}"/include/ --enable-static --disable-shared --disable-oggtest --disable-vorbistest --disable-examples --disable-asm --disable-spec
  execute make -j $MJOBS
  execute make install
  build_done "libtheora" "$LIBTHEORA_VERSION"
fi
CONFIGURE_OPTIONS+=("--enable-libtheora")

if $NONFREE_AND_GPL; then
  if build "fdk_aac" "$FDK_AAC_VERSION"; then
    download "https://sourceforge.net/projects/opencore-amr/files/fdk-aac/fdk-aac-$FDK_AAC_VERSION.tar.gz/download?use_mirror=gigenet" "fdk-aac-$FDK_AAC_VERSION.tar.gz"
    execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static --enable-pic
    execute make -j $MJOBS
    execute make install
    build_done "fdk_aac" "$FDK_AAC_VERSION"
  fi
  CONFIGURE_OPTIONS+=("--enable-libfdk-aac")
fi

if build "libtiff" "$LIBTIFF_VERSION"; then
  download "https://download.osgeo.org/libtiff/tiff-$LIBTIFF_VERSION.tar.xz"
  execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static --disable-dependency-tracking --disable-lzma --disable-webp --disable-zstd --without-x
  execute make -j $MJOBS
  execute make install
  build_done "libtiff" "$LIBTIFF_VERSION"
fi

if build "libpng" "$LIBPNG_VERSION"; then
  download "https://sourceforge.net/projects/libpng/files/libpng16/$LIBPNG_VERSION/libpng-$LIBPNG_VERSION.tar.gz/download" "libpng-$LIBPNG_VERSION.tar.gz"
  export LDFLAGS="${LDFLAGS}"
  export CPPFLAGS="${CFLAGS}"
  execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
  execute make -j $MJOBS
  execute make install
  build_done "libpng" "$LIBPNG_VERSION"
fi

if [[ "$OSTYPE" != "darwin"* ]]; then
  if build "libwebp" "$LIBWEBP_VERSION"; then
    CPPFLAGS=
    download "https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-$LIBWEBP_VERSION.tar.gz" "libwebp-$LIBWEBP_VERSION.tar.gz"
    execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static --disable-dependency-tracking --disable-gl --with-zlib-include="${WORKSPACE}"/include/ --with-zlib-lib="${WORKSPACE}"/lib
    make_dir build
    cd build || exit
    execute cmake -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_BINDIR=bin -DCMAKE_INSTALL_INCLUDEDIR=include -DENABLE_SHARED=OFF -DENABLE_STATIC=ON ../
    execute make -j $MJOBS
    execute make install
    build_done "libwebp" "$LIBWEBP_VERSION"
  fi
  CONFIGURE_OPTIONS+=("--enable-libwebp")
fi

if build "libsdl" "$LIBSDL_VERSION"; then
  download "https://www.libsdl.org/release/SDL2-$LIBSDL_VERSION.tar.gz"
  execute ./configure --prefix="${WORKSPACE}" --disable-shared --enable-static
  execute make -j $MJOBS
  execute make install
  build_done "libsdl" "$LIBSDL_VERSION"
fi

if $NONFREE_AND_GPL; then
  if build "srt" "$SRT_VERSION"; then
    download "https://github.com/Haivision/srt/archive/v$SRT_VERSION.tar.gz" "srt-$SRT_VERSION.tar.gz"
    export OPENSSL_ROOT_DIR="${WORKSPACE}"
    export OPENSSL_LIB_DIR="${WORKSPACE}"/lib
    export OPENSSL_INCLUDE_DIR="${WORKSPACE}"/include/
    execute cmake . -DCMAKE_INSTALL_PREFIX="${WORKSPACE}" -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_BINDIR=bin -DCMAKE_INSTALL_INCLUDEDIR=include -DENABLE_SHARED=OFF -DENABLE_STATIC=ON -DENABLE_APPS=OFF -DUSE_STATIC_LIBSTDCXX=ON
    execute make install

    if [ -n "$LDEXEFLAGS" ]; then
      sed -i.backup 's/-lgcc_s/-lgcc_eh/g' "${WORKSPACE}"/lib/pkgconfig/srt.pc
    fi

    build_done "srt" "$SRT_VERSION"
  fi
  CONFIGURE_OPTIONS+=("--enable-libsrt")
fi

##
## HWaccel library
##

if [[ "$OSTYPE" == "linux-gnu" ]]; then
  if command_exists "nvcc"; then
    if build "nv-codec" "$NVCODEC_VERSION"; then
      download "https://github.com/FFmpeg/nv-codec-headers/releases/download/n$NVCODEC_VERSION/nv-codec-headers-$NVCODEC_VERSION.tar.gz"
      execute make PREFIX="${WORKSPACE}"
      execute make install PREFIX="${WORKSPACE}"
      build_done "nv-codec" "$NVCODEC_VERSION"
    fi
    CFLAGS+=" -I/usr/local/cuda/include"
    LDFLAGS+=" -L/usr/local/cuda/lib64"
    CONFIGURE_OPTIONS+=("--enable-cuda-nvcc" "--enable-cuvid" "--enable-nvenc" "--enable-cuda-llvm")

    if [ -z "$LDEXEFLAGS" ]; then
      CONFIGURE_OPTIONS+=("--enable-libnpp")
    fi

    CONFIGURE_OPTIONS+=("--nvccflags=-gencode arch=compute_52,code=sm_52")
  fi

  if [ -z "$LDEXEFLAGS" ]; then
    if library_exists "libva"; then
      if build "vaapi" "1"; then
        build_done "vaapi" "1"
      fi
      CONFIGURE_OPTIONS+=("--enable-vaapi")
    fi
  fi

  if build "amf" "$AMF_VERSION"; then
    download "https://github.com/GPUOpen-LibrariesAndSDKs/AMF/archive/refs/tags/v$AMF_VERSION.tar.gz" "AMF-$AMF_VERSION.tar.gz" "AMF-$AMF_VERSION"
    execute rm -rf "${WORKSPACE}/include/AMF"
    execute mkdir -p "${WORKSPACE}/include/AMF"
    execute cp -r "${PACKAGES}"/AMF-"$AMF_VERSION"/AMF-"$AMF_VERSION"/amf/public/include/* "${WORKSPACE}/include/AMF/"
    build_done "amf" "$AMF_VERSION"
  fi
  CONFIGURE_OPTIONS+=("--enable-amf")
fi

##
## FFmpeg
##

EXTRA_VERSION=""
if [[ "$OSTYPE" == "darwin"* ]]; then
  EXTRA_VERSION="${FFMPEG_VERSION}"
fi

if build "ffmpeg" "$FFMPEG_VERSION"; then
  download "https://github.com/FFmpeg/FFmpeg/archive/refs/heads/release/$FFMPEG_VERSION.tar.gz" "FFmpeg-release-$FFMPEG_VERSION.tar.gz"
  ./configure "${CONFIGURE_OPTIONS[@]}" \
    --disable-debug \
    --disable-doc \
    --disable-shared \
    --enable-pthreads \
    --enable-static \
    --enable-small \
    --enable-version3 \
    --extra-cflags="${CFLAGS}" \
    --extra-ldexeflags="${LDEXEFLAGS}" \
    --extra-ldflags="${LDFLAGS}" \
    --extra-libs="${EXTRALIBS}" \
    --pkgconfigdir="$WORKSPACE/lib/pkgconfig" \
    --pkg-config-flags="--static" \
    --prefix="${WORKSPACE}" \
    --extra-version="${EXTRA_VERSION}"

  execute make -j $MJOBS
  execute make install
  build_done "ffmpeg" "$FFMPEG_VERSION"
fi

if build "avisynthplus" "$AVISYNTHPLUS_VERSION"; then
  download "https://github.com/AviSynth/AviSynthPlus/archive/refs/tags/v$AVISYNTHPLUS_VERSION.tar.gz" "AviSynthPlus-$AVISYNTHPLUS_VERSION.tar.gz"
  make_dir avisynth-build  && cd avisynth-build 
  cmake ../ -DCMAKE_INSTALL_PREFIX="${WORKSPACE}"
  execute make -j $MJOBS
  execute make install
  build_done "avisynthplus" "$AVISYNTHPLUS_VERSION"
fi

##
## NVEnc
##

if build "nvenc" "$NVENC_VERSION"; then
  download "https://github.com/rigaya/NVEnc/archive/refs/tags/$NVENC_VERSION.tar.gz" "NVEnc-$NVENC_VERSION.tar.gz"
  rm -rf ./cppcodec
  rm -rf ./build_pkg
  git clone https://github.com/tplgy/cppcodec --depth=1 
  git clone https://github.com/rigaya/build_pkg --depth=1
  sed -i 's/avfilter_register_all()/avfilter_init_dict(0,0)/g' ./configure
  ./configure --prefix="${WORKSPACE}" \
  --extra-cxxflags="${CFLAGS}" \
  --extra-ldflags="${LDFLAGS}" \
  --disable-vapoursynth

  execute make -j $MJOBS
  execute make install
  build_done "nvenc" "$NVENC_VERSION"
fi

verify_binary_type

echo ""
echo "Building done. The following binaries can be found here:"
echo "- ffmpeg: $WORKSPACE/bin/ffmpeg"
echo "- ffprobe: $WORKSPACE/bin/ffprobe"
echo "- ffplay: $WORKSPACE/bin/ffplay"
echo "- nvenc: $WORKSPACE/bin/nvencc"
echo ""

exit 0
